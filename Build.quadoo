function LoadModule (strModule)
{
	try
		return Host.LoadQuadoo(strModule);
	catch
		return Host.LoadQuadoo("Modules\\" + strModule);
}

function RunToolWithStartDir (oCurrent, strToolExe, strCmdLine, strStartDir)
{
	var oTool = Host.CreateProcess(oCurrent.GetPathOf(strToolExe), strCmdLine, strStartDir);
	oTool.Wait();
	return oTool.GetExitCode();
}

function PackageFiles (oPackage, strTarget, oSource, aFiles)
{
	var cbPackaged = 0;
	for(int i = 0; i < len(aFiles); i++)
	{
		if(0 <= strchr(aFiles[i], '*'))
		{
			try
			{
				var oEnum = oSource.Find(aFiles[i]);
				var oPath = Host.OpenFolder(oEnum.Path);
				do
				{
					var strName = oEnum.Name;
					cbPackaged += oPackage.AddFile(oPath.GetPathOf(strName), strTarget + strName);
				} while(oEnum.Next());
			}
			catch
			{
				println("WARNING: Could not find \"" + aFiles[i] + "\" at: " + (string)oSource);
			}
		}
		else
		{
			if(!oSource.IsFile(aFiles[i]))
				println("ERROR: Could not find \"" + aFiles[i] + "\" at: " + (string)oSource);
			cbPackaged += oPackage.AddFile(oSource.GetPathOf(aFiles[i]), strTarget + aFiles[i]);
		}
	}
	return cbPackaged;
}

function SizeLabel (cb)
{
	var oSB = stringbuilder();

	if(cb < 1024)
		oSB.Append(cb + " bytes");
	else
	{
		if(cb < 1048576)
			oSB.Format("%.2f KB", (double)cb / 1024.0);
		else
			oSB.Format("%.2f MB", (double)cb / 1048576.0);

		oSB.Append(" (" + cb + " bytes)");
	}

	return (string)oSB;
}

function main ()
{
	var oRoot = Host.OpenFolder();
	var oConfig = JSONParse(Host.ReadTextFile("Buchanan.json"));
	var strMod = "Buchanan";
	var oZIP = LoadModule("QSZIP.dll");
	var cbPackaged = (long)0;

	if(!oRoot.IsFolder(oConfig.output))
		oRoot.CreateFolder(oConfig.output);
	var oOutput = Host.OpenFolder(oConfig.output);

	var oSource = Host.OpenFolder(strMod);
	var oACS = oSource.OpenFolder("ACS");

	var nExitCode = RunToolWithStartDir(oRoot, oConfig.acc, "-i \"" + oRoot.GetPathOf(oConfig.common) + "\" \"" + oACS.GetPathOf("MAPSCRIPT.ACS") + "\" \"" + oOutput.GetPathOf("BEHAVIOR.LMP") + "\"", (string)oACS);
	if(0 != nExitCode)
	{
		println("ACC.EXE reported a compilation error (" + nExitCode + ") in MAPSCRIPT.ACS!");
		return nExitCode;
	}
	if(!oOutput.IsFile("SCRIPTS.LMP"))
		oACS.CopyHardLink("MAPSCRIPT.ACS", oOutput.GetPathOf("SCRIPTS.LMP"));

	nExitCode = RunToolWithStartDir(oRoot, oConfig.acc, "-i \"" + oRoot.GetPathOf(oConfig.common) + "\" scripts.acs scripts.o", (string)oACS);
	if(0 != nExitCode)
	{
		println("ACC.EXE reported a compilation error (" + nExitCode + ") in SCRIPTS.ACS!");
		return nExitCode;
	}

	if(oOutput.IsFile(strMod + ".pk3"))
		oOutput.DeleteFile(strMod + ".pk3");
	println("Packaging " + strMod + ".pk3");

	var oPackage = oZIP.OpenWriter(oOutput.GetPathOf(strMod + ".pk3"), "new");
	cbPackaged += PackageFiles(oPackage, "ACS/", oACS, { "scripts.*" });
	cbPackaged += PackageFiles(oPackage, "ACTORS/", oSource.OpenFolder("ACTORS"), { "*.txt" });
	cbPackaged += PackageFiles(oPackage, "GRAPHICS/", oSource.OpenFolder("GRAPHICS"), { "*" });
	cbPackaged += PackageFiles(oPackage, "MAPS/", oSource.OpenFolder("MAPS"), { "*.wad" });
	cbPackaged += PackageFiles(oPackage, "MUSIC/", oSource.OpenFolder("MUSIC"), { "*" });
	cbPackaged += PackageFiles(oPackage, "SOUNDS/", oSource.OpenFolder("SOUNDS"), { "*.wav" });
	cbPackaged += PackageFiles(oPackage, "SPRITES/", oSource.OpenFolder("SPRITES"), { "*.png" });
	cbPackaged += PackageFiles(oPackage, "TEXTURES/", oSource.OpenFolder("TEXTURES"), { "*.png" });
	cbPackaged += PackageFiles(oPackage, "", oSource, { "ANIMDEFS.txt", "DECORATE.txt", "LANGUAGE.txt", "LOADACS.txt", "MAPINFO.txt", "SNDINFO.txt", "TEXTURES.txt" });
	oPackage = null;

	var cbCompressed = oOutput.GetFileSize(strMod + ".pk3");
	println("Created: " + strMod + ".pk3");
	println("Uncompressed File Size: " + SizeLabel(cbPackaged));
	println("Compressed File Size: " + SizeLabel(cbCompressed));
	println("Compression Result: " + stringbuilder().Format("%.2f%%", (double)(cbCompressed * 100) / (double)cbPackaged));

	return 0;
}
